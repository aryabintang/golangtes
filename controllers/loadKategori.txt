package controllers (updated)

import (
	"context"
	"golang_cms/configs"
	"golang_cms/models"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/go-playground/validator/v10"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"golang.org/x/text/message/pipeline"
)

var Collectionload *mongo.Collection = configs.GetCollection(configs.DB, "load_kategori")
var validasi = validator.New()

// mengambil seluruh data kategori
func GetAllLoadi(c *gin.Context) {
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	var kategori []models.PayloadCategory
	defer cancel()

	results, err := Collectionload.Find(ctx, bson.M{})

	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"Status":  500,
			"Message": err.Error(),
		})
		return
	}
	//reading from the db in an optimal way
	defer results.Close(ctx)
	for results.Next(ctx) {
		var singleKategori models.PayloadCategory
		if err = results.Decode(&singleKategori); err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{
				"Status":  500,
				"Message": err.Error(),
			})
			return
		}

		pipeline := bson.M{
			bson.M{"$match": bson.M{"IdMainCategory": primitive.ObjectID }}
		}
		// query = db.collection.aggregate([
		// 	{ 
		// 		"$group": {
		// 			"_id": "$your_field", #GROUP BY your_field
		// 			"total": {"$sum":1}   #COUNT(*)
		// 		}
		// 	}
		kategori = append(kategori, singleKategori)
	}

	c.JSON(http.StatusOK, gin.H{
		"Data":    kategori,
		"Status":  200,
		"Message": "success",
	})
}

//